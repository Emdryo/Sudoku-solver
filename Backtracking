import matplotlib.pyplot as plt
import numpy as np
plt.rcParams["figure.figsize"]=(12,12)


def sudoku(Dat):
    grid = [[0 for i in range(9)] for j in range(9)]
    highlight_color = 'Black'
    highlight_linewidth = 2.5

    fig, ax = plt.subplots()
    ax.matshow(Dat)
    for (i, j), z in np.ndenumerate(Dat):
        if z==0:
            pass
        else:
            ax.text(j+0.5, i+0.5, '{:0.0f}'.format(z), ha='center', va='center', size=20)
    cax = ax.matshow(grid, cmap='Blues')
    ax.axhline(y=3, color=highlight_color, linewidth=highlight_linewidth)
    ax.axvline(x=3, color=highlight_color, linewidth=highlight_linewidth)
    ax.axvline(x=6, color=highlight_color, linewidth=highlight_linewidth)
    ax.axhline(y=6, color=highlight_color, linewidth=highlight_linewidth)
    ax.set_xticklabels([])
    ax.set_yticklabels([])
    ax.xaxis.set_ticks_position('top')
    ax.grid(True)
    ax.set_xlim(0, 9)
    ax.set_ylim(0, 9)
    plt.show()

def hypersudoku(Dat):
    grid = [[0 for i in range(9)] for j in range(9)]
    highlight_color = 'Black'
    highlight_linewidth = 2.5

    fig, ax = plt.subplots()
    ax.matshow(Dat)
    for (i, j), z in np.ndenumerate(Dat):
        if z==0:
            pass
        else:
            ax.text(j+0.5, i+0.5, '{:0.0f}'.format(z), ha='center', va='center', size=20)
    cax = ax.matshow(grid, cmap='Blues')
    interval_start = 1
    interval_end = 4
    ax.axhline(y=3, color=highlight_color, linewidth=highlight_linewidth)
    ax.axvline(x=3, color=highlight_color, linewidth=highlight_linewidth)
    ax.axvline(x=6, color=highlight_color, linewidth=highlight_linewidth)
    ax.axhline(y=6, color=highlight_color, linewidth=highlight_linewidth)
    ax.axhspan(1, 4, xmin=1/9, xmax=4/9, facecolor='blue', alpha=0.1)    
    ax.axhspan(5, 8, xmin=1/9, xmax=4/9, facecolor='blue', alpha=0.1)
    ax.axhspan(1, 4, xmin=5/9, xmax=8/9, facecolor='blue', alpha=0.1)    
    ax.axhspan(5, 8, xmin=5/9, xmax=8/9, facecolor='blue', alpha=0.1)    

    ax.set_xticklabels([])
    ax.set_yticklabels([])
    ax.xaxis.set_ticks_position('top')
    ax.grid(True)
    ax.set_xlim(0, 9)
    ax.set_ylim(0, 9)
    plt.show()

def grids(Data, i, j, num):
    # Check if the number is not present in the same row, column, and 3x3 grid
    if  num not in Data[:,j] and num not in Data[i,:] and num not in Data[i-i%3:i-i%3+3, j-j%3:j-j%3+3]:
        return True
    else:
        return False
    
def backtracking(Dat):
    Data=np.copy(Dat) #ændre ikke data
    for (i, j), z in np.ndenumerate(Data):
        if z == 0: #lol
            for k in range(1, 10): #sætter et tal og går et op
                if grids(Data, i, j, k)==True: #hvis den kan sætte et tal/kriterier opfyldt
                    Data[i, j] = k #sæt tal
                    if backtracking(Data): #hvis denne ikke kan sætte noget
                        return True #returner true
                    Data[i, j] = 0 #sæt den til 0 og gå tilbage
            return False #hvis der ingen løsning er
    return True, #sudoku(Data) #hvis der en løsning, og print
